<%@ jet package="de.dailab.vsdt.trafo.jiacbeans.export.generated" class="MessageEventHandlerGenerator"%>
	class MessageEventHandler extends Thread{
		Thread toStop;
		boolean triggered = false;
		String address;
		Class payloadClass;
		SpaceObserver<IFact> observer;
		Action joinAction;
		Action leaveAction;
		IGroupAddress groupAddress;
		
		public MessageEventHandler(String channel, String payloadType, Thread toStop){
			address = channel;
			this.toStop = toStop;
			joinAction = retrieveAction(ICommunicationBean.ACTION_JOIN_GROUP);
			leaveAction = retrieveAction(ICommunicationBean.ACTION_LEAVE_GROUP);
			groupAddress = CommunicationAddressFactory.createGroupAddress(address);
			try {
				payloadClass = ClassLoader.getSystemClassLoader().loadClass(payloadType);
			} catch (ClassNotFoundException e) {
				log.error("Class "+payloadType+" not Found!");
				e.printStackTrace();
			} 
			observer = new SpaceObserver<IFact>(){
				public void notify(SpaceEvent<? extends IFact> event) {
					if(event instanceof WriteCallEvent<?>){
						Object obj = event.getObject();
						if(obj instanceof IJiacMessage){
							IJiacMessage msg = (IJiacMessage)obj;
							if(msg.getHeader(IJiacMessage.Header.SEND_TO).equals(address) &&
							   payloadClass.isInstance(msg.getPayload())){
								memory.remove(obj);
								compensate();
							}
						}
					}
				}
			};		
		}
		
		public void run(){
			invoke(joinAction, new Serializable[]{groupAddress});
			memory.attach(observer);
		}
		
		public void compensate(){
			triggered = true;
			detach();
		}
		
		public void detach(){
			memory.detach(observer);
			invoke(leaveAction, new Serializable[]{groupAddress});
		}
		
		public boolean hasBeenTriggered(){
			return triggered;
		}
	}