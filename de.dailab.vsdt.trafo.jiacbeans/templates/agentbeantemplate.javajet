<%@ jet package="de.dailab.vsdt.trafo.jiacbeans.export.generated" class="AgentBeanGenerator" imports = "jiacbeans.* java.util.* java.io.BufferedReader java.io.StringReader java.io.IOException"%>
<% AgentBean bean = (AgentBean)argument; 
   String packageName = bean.getPackageName();
   String packageDeclaration = "";
   if(packageName.length()!=0){
   		packageDeclaration = "package "+bean.getPackageName()+";";
   }
   List<Method> methods = bean.getMethods();
   List<JavaVariable> attributes = bean.getAttributes();
   List<Action> actions = bean.getActions();
   List<String> imports = bean.getImports();
   List<SubProcess> subprocesses = bean.getSubprocesses();
   Map<String,Action> actionMap = new HashMap<String,Action>();
   for(Action act : actions){
   		String methodName = act.getLocation().split("#")[1];
   		actionMap.put(methodName,act);
   }
   SubProcessGenerator spg = new SubProcessGenerator();
   String importSuperClass = (actions.size()>0)? "import de.dailab.jiactng.agentcore.action.AbstractMethodExposingBean;\nimport de.dailab.jiactng.agentcore.action.scope.ActionScope;":"import de.dailab.jiactng.agentcore.AbstractAgentBean;";
   String superClass = (actions.size()>0)?"AbstractMethodExposingBean" : "AbstractAgentBean";
   String classDeclaration = "public class "+bean.getName()+" extends "+superClass;
%>
<%=packageDeclaration%>

<%=importSuperClass%>
<% for(String i : imports){%>
import <%=i%>;
<%}%>

<%=classDeclaration%>{
<% for(Action act: actions){%>
	public final static String <%= act.getName().toUpperCase()%> = "<%= act.getLocation()%>"; 
<%}%>

<% for(JavaVariable var: attributes){%>
	/**
	 *  <!-- begin-user-doc -->
	 *  <!-- end-user-doc -->
	 *	delete the generated tag after you edited this field
	 *  @generated
	 */
	<%= var.toString()%>;
<%}%>

<% for(Method method : methods){%>
	/**
	 *  <!-- begin-user-doc -->
	 *  <!-- end-user-doc -->
	 *	delete the generated tag after you edited this method
	 *  @generated
	 */
	<%Action act = actionMap.get(method.getName());
	if(act!=null){%>
	@Expose(name = <%=act.getName()%>, scope = ActionScope.GLOBAL)
	<%}%>
	<%String cS = method.toString();
	  String result = "";
	  BufferedReader reader = new BufferedReader(new StringReader(cS));
	  try{
	  	String line = reader.readLine();
		while(line!=null){
		  if(!line.equals(""))result+="\t"+line+"\n";
		  line = reader.readLine();
		}
	  }catch(IOException e){}
	%>
<%= result+"\n"%> 
<%}%>

<% for(SubProcess sub : subprocesses){%>
<%String cS = spg.generate(sub);
	  String result = "";
	  BufferedReader reader = new BufferedReader(new StringReader(cS));
	  try{
	  	String line = reader.readLine();
		while(line!=null){
		  if(!line.equals(""))result+="\t"+line+"\n";
		  line = reader.readLine();
		}
	  }catch(IOException e){}
	%>
<%= result+"\n"%>
<%}%>

<% if(bean.isHandlingTimeoutEvent()){%>
<%= new TimeoutEventHandlerGenerator().generate(null)%>
<%}%>
<% if(bean.isHandlingMessageEvent()){%>
<%= new MessageEventHandlerGenerator().generate(null)%>
<%}%>
<% if(bean.isHandlingTimeEvent()){%>
<%= new TimeEventHandlerGenerator().generate(null)%>
<%}%>
}