package de.dailab.vsdt.diagram.rsd.client;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import de.dailab.jiactng.rsd.ws.WSRichServiceDirectoryPortTypeProxy;
import de.dailab.jiactng.rsd.ws.xsd.Axis2ServiceDescription;
import de.dailab.vsdt.diagram.rsd.IRsdClient;
import de.dailab.vsdt.diagram.rsd.IRsdWS;

/**
 * client for the Rich Service Directory generated by Eclipse J2EE
 *  
 * @author kuester
 */
public class Axis2RsdClient implements IRsdClient {

	public static final String defaultEndpoint= "http://localhost:90/axis2/services/WSRichServiceDirectory?wsdl";
	
	/**the generated proxy*/
	private WSRichServiceDirectoryPortTypeProxy proxy= null;
	
	/**the last set of services received from the RSD*/
	private List<IRsdWS> services= new ArrayList<IRsdWS>();
	
	private boolean connected= false;

	public boolean connect(String endpoint) {
		if (endpoint == null) {
			proxy= new WSRichServiceDirectoryPortTypeProxy(defaultEndpoint);
		} else {
			proxy= new WSRichServiceDirectoryPortTypeProxy(endpoint);
		}
		connected= true;
		return connected;
	}
	
	public boolean isConnected() {
		return connected;
	}
	
	public List<IRsdWS> getAllServices() {
		try {
			Axis2ServiceDescription[] serviceDescriptions = proxy.getAllServices();
			updateServiceList(serviceDescriptions);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return services;
	}
	
	public List<IRsdWS> getCachedServices() {
		return services;
	}
	
	public List<IRsdWS> registerWebService(String wsdlUrl) {
		try {
			Axis2ServiceDescription[] serviceDescriptions= proxy.registerWebService(wsdlUrl);
			updateServiceList(serviceDescriptions);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return services;
	}

	
	public List<IRsdWS> registerWebServiceAndKeywords(String wsdlUrl, String[] keywords) {
		try {
			Axis2ServiceDescription[] serviceDescriptions = proxy.registerWebServiceAndKeywords(wsdlUrl, keywords);
			updateServiceList(serviceDescriptions);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return services;
	}
	
	public List<IRsdWS> registerWebServiceAndKeywordsSimple(String wsdlUrl, String[] keywords) {
		try {
			String serviceDescriptions = proxy.registerWebServiceAndKeywordsSimple(wsdlUrl, keywords);
			System.out.println(serviceDescriptions);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return services;
	}
	
	public IRsdWS createRsdWS(Object object) {
		if (object instanceof Axis2ServiceDescription) {
			IRsdWS ws= new Axis2RsdWS((Axis2ServiceDescription) object);
			return ws;
		}
		return null;
	}
	
	public void deregisterWebService(String url) {
		try {
			proxy.deregisterServiceSimple(url);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Update the service list field with the given array of service descriptions
	 * @param serviceDescriptions
	 */
	private void updateServiceList(Axis2ServiceDescription[] serviceDescriptions) {
		if (serviceDescriptions != null) {
			services.clear();
			for (Axis2ServiceDescription service : serviceDescriptions) {
				IRsdWS ws= createRsdWS(service);
				services.add(ws);
			}
		}
	}
}
