
=Math=

	- Author: Tobias KÃ¼ster
	- Version: 0.1
	- Created: Tue Aug 11 17:38:23 CEST 2009
	- Modified: Thu Aug 27 17:05:44 CEST 2009
	
Process Diagrams to be transformed to both BPEL and JIAC

==Algorithms==
* This diagram contains a few pools representing simple algorithms. While algorithms surely are not
  a typical usecase for BPMN, they do well for presenting the capabilities of the VSDT. The
  algorithms can equally well be translated to BPEL and JIAC, they can be interpreted by the VSDT's
  built-in interpreter and a textual representation can be generated.

===Extract Root===
* In this process the square root of the input value is approximated.
* The Pool 'Extract Root' belongs to Participant 'Mathematican'. The Pool's Process is of type
  PRIVATE. In that Process, a number of elements are accomplished in sequence. 
	* First, in Event 'start' the Message 'GetSquareRootRequest' of the Service
	  'TestService.SquareRoot' is received. The input message is received and its payload is bound
	  to the respective process properties. 
	* Hereafter,  starting at the Gateway 'input valid?',  one out of several branches will be performed: 
		* If the condition '($number < 0) && ($eps <= 0)' holds true, in Event 'invalid input' the
		  Message 'GetSquareRootResponse' of the Service 'TestService.SquareRoot' is sent. In case
		  of invalid input, the return value will be zero. Further, an error message is returned. 
		* If no condition applies, by default a number of elements are carried out in sequence. 
			* First, the Task 'initializevariables' is carried out. This initializes the variables:
			  The upper and lower bounds and the currently tested number. 
			* After that, starting at the Gateway '_2', a part of the Process will be processed in a
			  loop. At first, a number of elements are processed in sequence. 
				* First, the SCRIPT Task 'print' is carried out, running a script. Here, the
				  currently tested number is printed. The script's body can not be translated to
				  BPEL, thus this works only when translating to JIAC. 
				* Next, the Task 'calculate delta' is conducted. Delta is the difference between the
				  input number and the square of the currently tested number. 
			* Thereafter, the loop condition will be tested. While the condition (($d < 0) && ((0 -
 			  $d) > $eps)) || (($d > 0) && ($d > $eps)) holds true, the loop will continue and
 			  starting at the Gateway 'too large?', one out of several branches will be conducted: 
				* If the condition '($current*$current) > $number' holds true, the Task 'try smaller
				  number' is performed. The currently tested number is used as the new upper bound
				  and is then set to be the average of itself and the lower bound. 
				* If no condition applies, by default the Task 'try greater number' is accomplished.
				  The currently tested number is used as the new lower bound and is then set to be
				  the average of itself and the upper bound. 
			* After that, in Event 'return result' the Message 'GetSquareRootResponse' of the
			  Service 'TestService.SquareRoot' is sent. Returns the result of the approximation and
			  a success message. 
			
