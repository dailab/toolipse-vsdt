/*
* generated by Xtext
*/
grammar InternalVxl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.dailab.vsdt.vxl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.dailab.vsdt.vxl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.dailab.vsdt.vxl.services.VxlGrammarAccess;

}

@parser::members {

 	private VxlGrammarAccess grammarAccess;
 	
    public InternalVxlParser(TokenStream input, IAstFactory factory, VxlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/dailab/vsdt/vxl/parser/antlr/internal/InternalVxl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "VxlTerm";	
   	}
   	
   	@Override
   	protected VxlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleVxlTerm
entryRuleVxlTerm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlTermRule(), currentNode); }
	 iv_ruleVxlTerm=ruleVxlTerm 
	 { $current=$iv_ruleVxlTerm.current; } 
	 EOF 
;

// Rule VxlTerm
ruleVxlTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlTermAccess().getHeadVxlElementParserRuleCall_0_0(), currentNode); 
	    }
		lv_head_0_0=ruleVxlElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"head",
	        		lv_head_0_0, 
	        		"VxlElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlTermAccess().getOperatorVxlOperatorEnumRuleCall_1_0_0(), currentNode); 
	    }
		lv_operator_1_0=ruleVxlOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_1_0, 
	        		"VxlOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlTermAccess().getTailVxlTermParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_tail_2_0=ruleVxlTerm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tail",
	        		lv_tail_2_0, 
	        		"VxlTerm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleVxlElement
entryRuleVxlElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlElementRule(), currentNode); }
	 iv_ruleVxlElement=ruleVxlElement 
	 { $current=$iv_ruleVxlElement.current; } 
	 EOF 
;

// Rule VxlElement
ruleVxlElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlBracketTermParserRuleCall_0(), currentNode); 
    }
    this_VxlBracketTerm_0=ruleVxlBracketTerm
    { 
        $current = $this_VxlBracketTerm_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlNegationParserRuleCall_1(), currentNode); 
    }
    this_VxlNegation_1=ruleVxlNegation
    { 
        $current = $this_VxlNegation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlMinusParserRuleCall_2(), currentNode); 
    }
    this_VxlMinus_2=ruleVxlMinus
    { 
        $current = $this_VxlMinus_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlValueParserRuleCall_3(), currentNode); 
    }
    this_VxlValue_3=ruleVxlValue
    { 
        $current = $this_VxlValue_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlVariableParserRuleCall_4(), currentNode); 
    }
    this_VxlVariable_4=ruleVxlVariable
    { 
        $current = $this_VxlVariable_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlListParserRuleCall_5(), currentNode); 
    }
    this_VxlList_5=ruleVxlList
    { 
        $current = $this_VxlList_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlElementAccess().getVxlCardinalityParserRuleCall_6(), currentNode); 
    }
    this_VxlCardinality_6=ruleVxlCardinality
    { 
        $current = $this_VxlCardinality_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleVxlBracketTerm
entryRuleVxlBracketTerm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlBracketTermRule(), currentNode); }
	 iv_ruleVxlBracketTerm=ruleVxlBracketTerm 
	 { $current=$iv_ruleVxlBracketTerm.current; } 
	 EOF 
;

// Rule VxlBracketTerm
ruleVxlBracketTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getVxlBracketTermAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlBracketTermAccess().getTermVxlTermParserRuleCall_1_0(), currentNode); 
	    }
		lv_term_1_0=ruleVxlTerm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlBracketTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"term",
	        		lv_term_1_0, 
	        		"VxlTerm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getVxlBracketTermAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleVxlNegation
entryRuleVxlNegation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlNegationRule(), currentNode); }
	 iv_ruleVxlNegation=ruleVxlNegation 
	 { $current=$iv_ruleVxlNegation.current; } 
	 EOF 
;

// Rule VxlNegation
ruleVxlNegation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'not' 
    {
        createLeafNode(grammarAccess.getVxlNegationAccess().getNotKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlNegationAccess().getElementVxlElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_element_1_0=ruleVxlElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlNegationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_1_0, 
	        		"VxlElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVxlMinus
entryRuleVxlMinus returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlMinusRule(), currentNode); }
	 iv_ruleVxlMinus=ruleVxlMinus 
	 { $current=$iv_ruleVxlMinus.current; } 
	 EOF 
;

// Rule VxlMinus
ruleVxlMinus returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'-' 
    {
        createLeafNode(grammarAccess.getVxlMinusAccess().getHyphenMinusKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlMinusAccess().getElementVxlElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_element_1_0=ruleVxlElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlMinusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_1_0, 
	        		"VxlElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVxlCardinality
entryRuleVxlCardinality returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlCardinalityRule(), currentNode); }
	 iv_ruleVxlCardinality=ruleVxlCardinality 
	 { $current=$iv_ruleVxlCardinality.current; } 
	 EOF 
;

// Rule VxlCardinality
ruleVxlCardinality returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#' 
    {
        createLeafNode(grammarAccess.getVxlCardinalityAccess().getNumberSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlCardinalityAccess().getElementVxlElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_element_1_0=ruleVxlElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlCardinalityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_1_0, 
	        		"VxlElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVxlVariable
entryRuleVxlVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlVariableRule(), currentNode); }
	 iv_ruleVxlVariable=ruleVxlVariable 
	 { $current=$iv_ruleVxlVariable.current; } 
	 EOF 
;

// Rule VxlVariable
ruleVxlVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVxlVariableAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlVariableAccess().getAccessorVxlAccessorParserRuleCall_1_0(), currentNode); 
	    }
		lv_accessor_1_0=ruleVxlAccessor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessor",
	        		lv_accessor_1_0, 
	        		"VxlAccessor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleVxlAccessor
entryRuleVxlAccessor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlAccessorRule(), currentNode); }
	 iv_ruleVxlAccessor=ruleVxlAccessor 
	 { $current=$iv_ruleVxlAccessor.current; } 
	 EOF 
;

// Rule VxlAccessor
ruleVxlAccessor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlAccessorAccess().getVxlArrayAccessorParserRuleCall_0(), currentNode); 
    }
    this_VxlArrayAccessor_0=ruleVxlArrayAccessor
    { 
        $current = $this_VxlArrayAccessor_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlAccessorAccess().getVxlFieldAccessorParserRuleCall_1(), currentNode); 
    }
    this_VxlFieldAccessor_1=ruleVxlFieldAccessor
    { 
        $current = $this_VxlFieldAccessor_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleVxlArrayAccessor
entryRuleVxlArrayAccessor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlArrayAccessorRule(), currentNode); }
	 iv_ruleVxlArrayAccessor=ruleVxlArrayAccessor 
	 { $current=$iv_ruleVxlArrayAccessor.current; } 
	 EOF 
;

// Rule VxlArrayAccessor
ruleVxlArrayAccessor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getVxlArrayAccessorAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlArrayAccessorAccess().getIndexVxlTermParserRuleCall_1_0(), currentNode); 
	    }
		lv_index_1_0=ruleVxlTerm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlArrayAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"index",
	        		lv_index_1_0, 
	        		"VxlTerm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getVxlArrayAccessorAccess().getRightSquareBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlArrayAccessorAccess().getAccessorVxlAccessorParserRuleCall_3_0(), currentNode); 
	    }
		lv_accessor_3_0=ruleVxlAccessor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlArrayAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessor",
	        		lv_accessor_3_0, 
	        		"VxlAccessor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleVxlFieldAccessor
entryRuleVxlFieldAccessor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlFieldAccessorRule(), currentNode); }
	 iv_ruleVxlFieldAccessor=ruleVxlFieldAccessor 
	 { $current=$iv_ruleVxlFieldAccessor.current; } 
	 EOF 
;

// Rule VxlFieldAccessor
ruleVxlFieldAccessor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.' 
    {
        createLeafNode(grammarAccess.getVxlFieldAccessorAccess().getFullStopKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVxlFieldAccessorAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlFieldAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlFieldAccessorAccess().getAccessorVxlAccessorParserRuleCall_2_0(), currentNode); 
	    }
		lv_accessor_2_0=ruleVxlAccessor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlFieldAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessor",
	        		lv_accessor_2_0, 
	        		"VxlAccessor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleVxlList
entryRuleVxlList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlListRule(), currentNode); }
	 iv_ruleVxlList=ruleVxlList 
	 { $current=$iv_ruleVxlList.current; } 
	 EOF 
;

// Rule VxlList
ruleVxlList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getVxlListAccess().getLeftSquareBracketKeyword_0(), null); 
    }
((
(
		lv_empty_1_0=	']' 
    {
        createLeafNode(grammarAccess.getVxlListAccess().getEmptyRightSquareBracketKeyword_1_0_0(), "empty"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "empty", true, "]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlListAccess().getBodyVxlListElementParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_body_2_0=ruleVxlListElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_2_0, 
	        		"VxlListElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getVxlListAccess().getRightSquareBracketKeyword_1_1_1(), null); 
    }
)))
;





// Entry rule entryRuleVxlListElement
entryRuleVxlListElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlListElementRule(), currentNode); }
	 iv_ruleVxlListElement=ruleVxlListElement 
	 { $current=$iv_ruleVxlListElement.current; } 
	 EOF 
;

// Rule VxlListElement
ruleVxlListElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlListElementAccess().getFirstVxlTermParserRuleCall_0_0(), currentNode); 
	    }
		lv_first_0_0=ruleVxlTerm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlListElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"first",
	        		lv_first_0_0, 
	        		"VxlTerm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getVxlListElementAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlListElementAccess().getRestVxlListElementParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_rest_2_0=ruleVxlListElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlListElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rest",
	        		lv_rest_2_0, 
	        		"VxlListElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleVxlValue
entryRuleVxlValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlValueRule(), currentNode); }
	 iv_ruleVxlValue=ruleVxlValue 
	 { $current=$iv_ruleVxlValue.current; } 
	 EOF 
;

// Rule VxlValue
ruleVxlValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlValueAccess().getVxlNullConstParserRuleCall_0(), currentNode); 
    }
    this_VxlNullConst_0=ruleVxlNullConst
    { 
        $current = $this_VxlNullConst_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlValueAccess().getVxlBooleanConstParserRuleCall_1(), currentNode); 
    }
    this_VxlBooleanConst_1=ruleVxlBooleanConst
    { 
        $current = $this_VxlBooleanConst_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlValueAccess().getVxlNumericConstParserRuleCall_2(), currentNode); 
    }
    this_VxlNumericConst_2=ruleVxlNumericConst
    { 
        $current = $this_VxlNumericConst_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVxlValueAccess().getVxlStringConstParserRuleCall_3(), currentNode); 
    }
    this_VxlStringConst_3=ruleVxlStringConst
    { 
        $current = $this_VxlStringConst_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleVxlBooleanConst
entryRuleVxlBooleanConst returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlBooleanConstRule(), currentNode); }
	 iv_ruleVxlBooleanConst=ruleVxlBooleanConst 
	 { $current=$iv_ruleVxlBooleanConst.current; } 
	 EOF 
;

// Rule VxlBooleanConst
ruleVxlBooleanConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		lv_const_0_1=	'true' 
    {
        createLeafNode(grammarAccess.getVxlBooleanConstAccess().getConstTrueKeyword_0_0(), "const"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlBooleanConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "const", lv_const_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_const_0_2=	'false' 
    {
        createLeafNode(grammarAccess.getVxlBooleanConstAccess().getConstFalseKeyword_0_1(), "const"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlBooleanConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "const", lv_const_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
;





// Entry rule entryRuleVxlNullConst
entryRuleVxlNullConst returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlNullConstRule(), currentNode); }
	 iv_ruleVxlNullConst=ruleVxlNullConst 
	 { $current=$iv_ruleVxlNullConst.current; } 
	 EOF 
;

// Rule VxlNullConst
ruleVxlNullConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_const_0_0=	'null' 
    {
        createLeafNode(grammarAccess.getVxlNullConstAccess().getConstNullKeyword_0(), "const"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlNullConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "const", lv_const_0_0, "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleVxlNumericConst
entryRuleVxlNumericConst returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlNumericConstRule(), currentNode); }
	 iv_ruleVxlNumericConst=ruleVxlNumericConst 
	 { $current=$iv_ruleVxlNumericConst.current; } 
	 EOF 
;

// Rule VxlNumericConst
ruleVxlNumericConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVxlNumericConstAccess().getConstNUMERICParserRuleCall_0(), currentNode); 
	    }
		lv_const_0_0=ruleNUMERIC		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlNumericConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"const",
	        		lv_const_0_0, 
	        		"NUMERIC", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleVxlStringConst
entryRuleVxlStringConst returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVxlStringConstRule(), currentNode); }
	 iv_ruleVxlStringConst=ruleVxlStringConst 
	 { $current=$iv_ruleVxlStringConst.current; } 
	 EOF 
;

// Rule VxlStringConst
ruleVxlStringConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_const_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getVxlStringConstAccess().getConstSTRINGTerminalRuleCall_0(), "const"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVxlStringConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"const",
	        		lv_const_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNUMERIC
entryRuleNUMERIC returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMERICRule(), currentNode); } 
	 iv_ruleNUMERIC=ruleNUMERIC 
	 { $current=$iv_ruleNUMERIC.current.getText(); }  
	 EOF 
;

// Rule NUMERIC
ruleNUMERIC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getNUMERICAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMERICAccess().getFullStopKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getNUMERICAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)?)
    ;





// Rule VxlOperator
ruleVxlOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'<' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getLTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getLEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getEQEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getNEQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getNEQEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getGTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getGTEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getGEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getGEEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getADDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getADDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getSUBEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getSUBEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getMULTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getMULTEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'/' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getDIVEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getDIVEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'%' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getMODEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getMODEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'and' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getANDEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getANDEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getOREnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getOREnumLiteralDeclaration_12(), null); 
    }
)
    |(	'++' 
	{
        $current = grammarAccess.getVxlOperatorAccess().getCONCATEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVxlOperatorAccess().getCONCATEnumLiteralDeclaration_13(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


