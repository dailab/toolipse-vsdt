/*
* generated by Xtext
*/

package de.dailab.vsdt.vxl.services;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class VxlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VxlTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadVxlElementParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorVxlOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cTailAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTailVxlTermParserRuleCall_1_1_0 = (RuleCall)cTailAssignment_1_1.eContents().get(0);
		
		//// COMPLEX TERMS
		//VxlTerm:
		//	head=VxlElement (operator=VxlOperator tail=VxlTerm)?;
		public ParserRule getRule() { return rule; }

		//head=VxlElement (operator=VxlOperator tail=VxlTerm)?
		public Group getGroup() { return cGroup; }

		//head=VxlElement
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//VxlElement
		public RuleCall getHeadVxlElementParserRuleCall_0_0() { return cHeadVxlElementParserRuleCall_0_0; }

		//(operator=VxlOperator tail=VxlTerm)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=VxlOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//VxlOperator
		public RuleCall getOperatorVxlOperatorEnumRuleCall_1_0_0() { return cOperatorVxlOperatorEnumRuleCall_1_0_0; }

		//tail=VxlTerm
		public Assignment getTailAssignment_1_1() { return cTailAssignment_1_1; }

		//VxlTerm
		public RuleCall getTailVxlTermParserRuleCall_1_1_0() { return cTailVxlTermParserRuleCall_1_1_0; }
	}

	public class VxlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVxlBracketTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVxlNegationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVxlMinusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVxlValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVxlVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVxlListParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVxlCardinalityParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//VxlElement:
		//	VxlBracketTerm | VxlNegation | VxlMinus | VxlValue | VxlVariable | VxlList | VxlCardinality;
		public ParserRule getRule() { return rule; }

		//VxlBracketTerm | VxlNegation | VxlMinus | VxlValue | VxlVariable | VxlList | VxlCardinality
		public Alternatives getAlternatives() { return cAlternatives; }

		//VxlBracketTerm
		public RuleCall getVxlBracketTermParserRuleCall_0() { return cVxlBracketTermParserRuleCall_0; }

		//VxlNegation
		public RuleCall getVxlNegationParserRuleCall_1() { return cVxlNegationParserRuleCall_1; }

		//VxlMinus
		public RuleCall getVxlMinusParserRuleCall_2() { return cVxlMinusParserRuleCall_2; }

		//VxlValue
		public RuleCall getVxlValueParserRuleCall_3() { return cVxlValueParserRuleCall_3; }

		//VxlVariable
		public RuleCall getVxlVariableParserRuleCall_4() { return cVxlVariableParserRuleCall_4; }

		//VxlList
		public RuleCall getVxlListParserRuleCall_5() { return cVxlListParserRuleCall_5; }

		//VxlCardinality
		public RuleCall getVxlCardinalityParserRuleCall_6() { return cVxlCardinalityParserRuleCall_6; }
	}

	public class VxlBracketTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlBracketTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermVxlTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// SPECIAL TERMS, UNARY OPERATORS
		//VxlBracketTerm:
		//	"(" term=VxlTerm ")";
		public ParserRule getRule() { return rule; }

		//"(" term=VxlTerm ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//term=VxlTerm
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//VxlTerm
		public RuleCall getTermVxlTermParserRuleCall_1_0() { return cTermVxlTermParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class VxlNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementVxlElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//VxlNegation:
		//	"not" element=VxlElement;
		public ParserRule getRule() { return rule; }

		//"not" element=VxlElement
		public Group getGroup() { return cGroup; }

		//"not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//element=VxlElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//VxlElement
		public RuleCall getElementVxlElementParserRuleCall_1_0() { return cElementVxlElementParserRuleCall_1_0; }
	}

	public class VxlMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementVxlElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//VxlMinus:
		//	"-" element=VxlElement;
		public ParserRule getRule() { return rule; }

		//"-" element=VxlElement
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//element=VxlElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//VxlElement
		public RuleCall getElementVxlElementParserRuleCall_1_0() { return cElementVxlElementParserRuleCall_1_0; }
	}

	public class VxlCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementVxlElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//VxlCardinality:
		//	"#" element=VxlElement;
		public ParserRule getRule() { return rule; }

		//"#" element=VxlElement
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//element=VxlElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//VxlElement
		public RuleCall getElementVxlElementParserRuleCall_1_0() { return cElementVxlElementParserRuleCall_1_0; }
	}

	public class VxlVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAccessorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessorVxlAccessorParserRuleCall_1_0 = (RuleCall)cAccessorAssignment_1.eContents().get(0);
		
		//// VARIABLES & ACCESSORS
		//VxlVariable:
		//	name=ID accessor=VxlAccessor?;
		public ParserRule getRule() { return rule; }

		//name=ID accessor=VxlAccessor?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//accessor=VxlAccessor?
		public Assignment getAccessorAssignment_1() { return cAccessorAssignment_1; }

		//VxlAccessor
		public RuleCall getAccessorVxlAccessorParserRuleCall_1_0() { return cAccessorVxlAccessorParserRuleCall_1_0; }
	}

	public class VxlAccessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlAccessor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVxlArrayAccessorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVxlFieldAccessorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VxlAccessor:
		//	VxlArrayAccessor | VxlFieldAccessor;
		public ParserRule getRule() { return rule; }

		//VxlArrayAccessor | VxlFieldAccessor
		public Alternatives getAlternatives() { return cAlternatives; }

		//VxlArrayAccessor
		public RuleCall getVxlArrayAccessorParserRuleCall_0() { return cVxlArrayAccessorParserRuleCall_0; }

		//VxlFieldAccessor
		public RuleCall getVxlFieldAccessorParserRuleCall_1() { return cVxlFieldAccessorParserRuleCall_1; }
	}

	public class VxlArrayAccessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlArrayAccessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexVxlTermParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccessorVxlAccessorParserRuleCall_3_0 = (RuleCall)cAccessorAssignment_3.eContents().get(0);
		
		//VxlArrayAccessor:
		//	"[" index=VxlTerm "]" accessor=VxlAccessor?;
		public ParserRule getRule() { return rule; }

		//"[" index=VxlTerm "]" accessor=VxlAccessor?
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//index=VxlTerm
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }

		//VxlTerm
		public RuleCall getIndexVxlTermParserRuleCall_1_0() { return cIndexVxlTermParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//accessor=VxlAccessor?
		public Assignment getAccessorAssignment_3() { return cAccessorAssignment_3; }

		//VxlAccessor
		public RuleCall getAccessorVxlAccessorParserRuleCall_3_0() { return cAccessorVxlAccessorParserRuleCall_3_0; }
	}

	public class VxlFieldAccessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlFieldAccessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAccessorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessorVxlAccessorParserRuleCall_2_0 = (RuleCall)cAccessorAssignment_2.eContents().get(0);
		
		//VxlFieldAccessor:
		//	"." name=ID accessor=VxlAccessor?;
		public ParserRule getRule() { return rule; }

		//"." name=ID accessor=VxlAccessor?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//accessor=VxlAccessor?
		public Assignment getAccessorAssignment_2() { return cAccessorAssignment_2; }

		//VxlAccessor
		public RuleCall getAccessorVxlAccessorParserRuleCall_2_0() { return cAccessorVxlAccessorParserRuleCall_2_0; }
	}

	public class VxlListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEmptyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cEmptyRightSquareBracketKeyword_1_0_0 = (Keyword)cEmptyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cBodyAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cBodyVxlListElementParserRuleCall_1_1_0_0 = (RuleCall)cBodyAssignment_1_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//// LISTS
		//VxlList:
		//	"[" (empty?="]" | body=VxlListElement "]");
		public ParserRule getRule() { return rule; }

		//"[" (empty?="]" | body=VxlListElement "]")
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//empty?="]" | body=VxlListElement "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//empty?="]"
		public Assignment getEmptyAssignment_1_0() { return cEmptyAssignment_1_0; }

		//"]"
		public Keyword getEmptyRightSquareBracketKeyword_1_0_0() { return cEmptyRightSquareBracketKeyword_1_0_0; }

		//body=VxlListElement "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//body=VxlListElement
		public Assignment getBodyAssignment_1_1_0() { return cBodyAssignment_1_1_0; }

		//VxlListElement
		public RuleCall getBodyVxlListElementParserRuleCall_1_1_0_0() { return cBodyVxlListElementParserRuleCall_1_1_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1() { return cRightSquareBracketKeyword_1_1_1; }
	}

	public class VxlListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlListElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstVxlTermParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRestVxlListElementParserRuleCall_1_1_0 = (RuleCall)cRestAssignment_1_1.eContents().get(0);
		
		//VxlListElement:
		//	first=VxlTerm ("," rest=VxlListElement)?;
		public ParserRule getRule() { return rule; }

		//first=VxlTerm ("," rest=VxlListElement)?
		public Group getGroup() { return cGroup; }

		//first=VxlTerm
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//VxlTerm
		public RuleCall getFirstVxlTermParserRuleCall_0_0() { return cFirstVxlTermParserRuleCall_0_0; }

		//("," rest=VxlListElement)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//rest=VxlListElement
		public Assignment getRestAssignment_1_1() { return cRestAssignment_1_1; }

		//VxlListElement
		public RuleCall getRestVxlListElementParserRuleCall_1_1_0() { return cRestVxlListElementParserRuleCall_1_1_0; }
	}

	public class VxlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVxlNullConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVxlBooleanConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVxlNumericConstParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVxlStringConstParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// CONSTANT VALUES
		//VxlValue:
		//	VxlNullConst | VxlBooleanConst | VxlNumericConst | VxlStringConst;
		public ParserRule getRule() { return rule; }

		//VxlNullConst | VxlBooleanConst | VxlNumericConst | VxlStringConst
		public Alternatives getAlternatives() { return cAlternatives; }

		//VxlNullConst
		public RuleCall getVxlNullConstParserRuleCall_0() { return cVxlNullConstParserRuleCall_0; }

		//VxlBooleanConst
		public RuleCall getVxlBooleanConstParserRuleCall_1() { return cVxlBooleanConstParserRuleCall_1; }

		//VxlNumericConst
		public RuleCall getVxlNumericConstParserRuleCall_2() { return cVxlNumericConstParserRuleCall_2; }

		//VxlStringConst
		public RuleCall getVxlStringConstParserRuleCall_3() { return cVxlStringConstParserRuleCall_3; }
	}

	public class VxlBooleanConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlBooleanConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cConstAlternatives_0 = (Alternatives)cConstAssignment.eContents().get(0);
		private final Keyword cConstTrueKeyword_0_0 = (Keyword)cConstAlternatives_0.eContents().get(0);
		private final Keyword cConstFalseKeyword_0_1 = (Keyword)cConstAlternatives_0.eContents().get(1);
		
		//VxlBooleanConst:
		//	const=("true" | "false");
		public ParserRule getRule() { return rule; }

		//const=("true" | "false")
		public Assignment getConstAssignment() { return cConstAssignment; }

		//"true" | "false"
		public Alternatives getConstAlternatives_0() { return cConstAlternatives_0; }

		//"true"
		public Keyword getConstTrueKeyword_0_0() { return cConstTrueKeyword_0_0; }

		//"false"
		public Keyword getConstFalseKeyword_0_1() { return cConstFalseKeyword_0_1; }
	}

	public class VxlNullConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlNullConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConstNullKeyword_0 = (Keyword)cConstAssignment.eContents().get(0);
		
		//VxlNullConst:
		//	const="null";
		public ParserRule getRule() { return rule; }

		//const="null"
		public Assignment getConstAssignment() { return cConstAssignment; }

		//"null"
		public Keyword getConstNullKeyword_0() { return cConstNullKeyword_0; }
	}

	public class VxlNumericConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlNumericConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstNUMERICParserRuleCall_0 = (RuleCall)cConstAssignment.eContents().get(0);
		
		//VxlNumericConst:
		//	const=NUMERIC;
		public ParserRule getRule() { return rule; }

		//const=NUMERIC
		public Assignment getConstAssignment() { return cConstAssignment; }

		//NUMERIC
		public RuleCall getConstNUMERICParserRuleCall_0() { return cConstNUMERICParserRuleCall_0; }
	}

	public class VxlStringConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VxlStringConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstSTRINGTerminalRuleCall_0 = (RuleCall)cConstAssignment.eContents().get(0);
		
		//VxlStringConst:
		//	const=STRING;
		public ParserRule getRule() { return rule; }

		//const=STRING
		public Assignment getConstAssignment() { return cConstAssignment; }

		//STRING
		public RuleCall getConstSTRINGTerminalRuleCall_0() { return cConstSTRINGTerminalRuleCall_0; }
	}

	public class NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// NATIVES
		//// ALTERNATIVES
		////terminal Numeric: "('0'..'9')+('.' ('0'..'9')+)?";
		////NumericConst:		const = INT; // keine kommazahlen 
		////BooleanConst:	isTrue ?= "true" | "false"; NUMERIC:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	public class VxlOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VxlOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLELessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNEQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTGreaterThanSignKeyword_4_0 = (Keyword)cGTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cADDPlusSignKeyword_6_0 = (Keyword)cADDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSUBHyphenMinusKeyword_7_0 = (Keyword)cSUBEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMULTAsteriskKeyword_8_0 = (Keyword)cMULTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDIVSolidusKeyword_9_0 = (Keyword)cDIVEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cMODPercentSignKeyword_10_0 = (Keyword)cMODEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cANDAndKeyword_11_0 = (Keyword)cANDEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cOROrKeyword_12_0 = (Keyword)cOREnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cCONCATEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cCONCATPlusSignPlusSignKeyword_13_0 = (Keyword)cCONCATEnumLiteralDeclaration_13.eContents().get(0);
		
		//// BINARY OPERATIONS
		//// String ** String -> String
		//enum VxlOperator:
		//	LT="<" // Term ** Term -> Bool
		//	// Num ** Num -> Num
		//	// Bool ** Bool -> Bool
		//	| LE="<=" | EQ="==" | NEQ="!=" | GT=">" | GE=">=" | ADD="+" | SUB="-" | MULT="*" | DIV="/" | MOD="%" | AND="and" |
		//	OR="or" | CONCAT="++";
		public EnumRule getRule() { return rule; }

		//LT="<" // Term ** Term -> Bool
		//// Num ** Num -> Num
		//// Bool ** Bool -> Bool
		//| LE="<=" | EQ="==" | NEQ="!=" | GT=">" | GE=">=" | ADD="+" | SUB="-" | MULT="*" | DIV="/" | MOD="%" | AND="and" |
		//OR="or" | CONCAT="++"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }

		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_1() { return cLEEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_1_0() { return cLELessThanSignEqualsSignKeyword_1_0; }

		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }

		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_2_0() { return cEQEqualsSignEqualsSignKeyword_2_0; }

		//NEQ="!="
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_3() { return cNEQEnumLiteralDeclaration_3; }

		//"!="
		public Keyword getNEQExclamationMarkEqualsSignKeyword_3_0() { return cNEQExclamationMarkEqualsSignKeyword_3_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_4() { return cGTEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_4_0() { return cGTGreaterThanSignKeyword_4_0; }

		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_5() { return cGEEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_5_0() { return cGEGreaterThanSignEqualsSignKeyword_5_0; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_6() { return cADDEnumLiteralDeclaration_6; }

		//"+"
		public Keyword getADDPlusSignKeyword_6_0() { return cADDPlusSignKeyword_6_0; }

		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_7() { return cSUBEnumLiteralDeclaration_7; }

		//"-"
		public Keyword getSUBHyphenMinusKeyword_7_0() { return cSUBHyphenMinusKeyword_7_0; }

		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_8() { return cMULTEnumLiteralDeclaration_8; }

		//"*"
		public Keyword getMULTAsteriskKeyword_8_0() { return cMULTAsteriskKeyword_8_0; }

		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_9() { return cDIVEnumLiteralDeclaration_9; }

		//"/"
		public Keyword getDIVSolidusKeyword_9_0() { return cDIVSolidusKeyword_9_0; }

		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_10() { return cMODEnumLiteralDeclaration_10; }

		//"%"
		public Keyword getMODPercentSignKeyword_10_0() { return cMODPercentSignKeyword_10_0; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_11() { return cANDEnumLiteralDeclaration_11; }

		//"and"
		public Keyword getANDAndKeyword_11_0() { return cANDAndKeyword_11_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_12() { return cOREnumLiteralDeclaration_12; }

		//"or"
		public Keyword getOROrKeyword_12_0() { return cOROrKeyword_12_0; }

		//CONCAT="++"
		public EnumLiteralDeclaration getCONCATEnumLiteralDeclaration_13() { return cCONCATEnumLiteralDeclaration_13; }

		//"++"
		public Keyword getCONCATPlusSignPlusSignKeyword_13_0() { return cCONCATPlusSignPlusSignKeyword_13_0; }
	}
	
	private VxlTermElements pVxlTerm;
	private VxlElementElements pVxlElement;
	private VxlBracketTermElements pVxlBracketTerm;
	private VxlNegationElements pVxlNegation;
	private VxlMinusElements pVxlMinus;
	private VxlCardinalityElements pVxlCardinality;
	private VxlVariableElements pVxlVariable;
	private VxlAccessorElements pVxlAccessor;
	private VxlArrayAccessorElements pVxlArrayAccessor;
	private VxlFieldAccessorElements pVxlFieldAccessor;
	private VxlListElements pVxlList;
	private VxlListElementElements pVxlListElement;
	private VxlValueElements pVxlValue;
	private VxlBooleanConstElements pVxlBooleanConst;
	private VxlNullConstElements pVxlNullConst;
	private VxlNumericConstElements pVxlNumericConst;
	private VxlStringConstElements pVxlStringConst;
	private VxlOperatorElements unknownRuleVxlOperator;
	private NUMERICElements pNUMERIC;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VxlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// COMPLEX TERMS
	//VxlTerm:
	//	head=VxlElement (operator=VxlOperator tail=VxlTerm)?;
	public VxlTermElements getVxlTermAccess() {
		return (pVxlTerm != null) ? pVxlTerm : (pVxlTerm = new VxlTermElements());
	}
	
	public ParserRule getVxlTermRule() {
		return getVxlTermAccess().getRule();
	}

	//VxlElement:
	//	VxlBracketTerm | VxlNegation | VxlMinus | VxlValue | VxlVariable | VxlList | VxlCardinality;
	public VxlElementElements getVxlElementAccess() {
		return (pVxlElement != null) ? pVxlElement : (pVxlElement = new VxlElementElements());
	}
	
	public ParserRule getVxlElementRule() {
		return getVxlElementAccess().getRule();
	}

	//// SPECIAL TERMS, UNARY OPERATORS
	//VxlBracketTerm:
	//	"(" term=VxlTerm ")";
	public VxlBracketTermElements getVxlBracketTermAccess() {
		return (pVxlBracketTerm != null) ? pVxlBracketTerm : (pVxlBracketTerm = new VxlBracketTermElements());
	}
	
	public ParserRule getVxlBracketTermRule() {
		return getVxlBracketTermAccess().getRule();
	}

	//VxlNegation:
	//	"not" element=VxlElement;
	public VxlNegationElements getVxlNegationAccess() {
		return (pVxlNegation != null) ? pVxlNegation : (pVxlNegation = new VxlNegationElements());
	}
	
	public ParserRule getVxlNegationRule() {
		return getVxlNegationAccess().getRule();
	}

	//VxlMinus:
	//	"-" element=VxlElement;
	public VxlMinusElements getVxlMinusAccess() {
		return (pVxlMinus != null) ? pVxlMinus : (pVxlMinus = new VxlMinusElements());
	}
	
	public ParserRule getVxlMinusRule() {
		return getVxlMinusAccess().getRule();
	}

	//VxlCardinality:
	//	"#" element=VxlElement;
	public VxlCardinalityElements getVxlCardinalityAccess() {
		return (pVxlCardinality != null) ? pVxlCardinality : (pVxlCardinality = new VxlCardinalityElements());
	}
	
	public ParserRule getVxlCardinalityRule() {
		return getVxlCardinalityAccess().getRule();
	}

	//// VARIABLES & ACCESSORS
	//VxlVariable:
	//	name=ID accessor=VxlAccessor?;
	public VxlVariableElements getVxlVariableAccess() {
		return (pVxlVariable != null) ? pVxlVariable : (pVxlVariable = new VxlVariableElements());
	}
	
	public ParserRule getVxlVariableRule() {
		return getVxlVariableAccess().getRule();
	}

	//VxlAccessor:
	//	VxlArrayAccessor | VxlFieldAccessor;
	public VxlAccessorElements getVxlAccessorAccess() {
		return (pVxlAccessor != null) ? pVxlAccessor : (pVxlAccessor = new VxlAccessorElements());
	}
	
	public ParserRule getVxlAccessorRule() {
		return getVxlAccessorAccess().getRule();
	}

	//VxlArrayAccessor:
	//	"[" index=VxlTerm "]" accessor=VxlAccessor?;
	public VxlArrayAccessorElements getVxlArrayAccessorAccess() {
		return (pVxlArrayAccessor != null) ? pVxlArrayAccessor : (pVxlArrayAccessor = new VxlArrayAccessorElements());
	}
	
	public ParserRule getVxlArrayAccessorRule() {
		return getVxlArrayAccessorAccess().getRule();
	}

	//VxlFieldAccessor:
	//	"." name=ID accessor=VxlAccessor?;
	public VxlFieldAccessorElements getVxlFieldAccessorAccess() {
		return (pVxlFieldAccessor != null) ? pVxlFieldAccessor : (pVxlFieldAccessor = new VxlFieldAccessorElements());
	}
	
	public ParserRule getVxlFieldAccessorRule() {
		return getVxlFieldAccessorAccess().getRule();
	}

	//// LISTS
	//VxlList:
	//	"[" (empty?="]" | body=VxlListElement "]");
	public VxlListElements getVxlListAccess() {
		return (pVxlList != null) ? pVxlList : (pVxlList = new VxlListElements());
	}
	
	public ParserRule getVxlListRule() {
		return getVxlListAccess().getRule();
	}

	//VxlListElement:
	//	first=VxlTerm ("," rest=VxlListElement)?;
	public VxlListElementElements getVxlListElementAccess() {
		return (pVxlListElement != null) ? pVxlListElement : (pVxlListElement = new VxlListElementElements());
	}
	
	public ParserRule getVxlListElementRule() {
		return getVxlListElementAccess().getRule();
	}

	//// CONSTANT VALUES
	//VxlValue:
	//	VxlNullConst | VxlBooleanConst | VxlNumericConst | VxlStringConst;
	public VxlValueElements getVxlValueAccess() {
		return (pVxlValue != null) ? pVxlValue : (pVxlValue = new VxlValueElements());
	}
	
	public ParserRule getVxlValueRule() {
		return getVxlValueAccess().getRule();
	}

	//VxlBooleanConst:
	//	const=("true" | "false");
	public VxlBooleanConstElements getVxlBooleanConstAccess() {
		return (pVxlBooleanConst != null) ? pVxlBooleanConst : (pVxlBooleanConst = new VxlBooleanConstElements());
	}
	
	public ParserRule getVxlBooleanConstRule() {
		return getVxlBooleanConstAccess().getRule();
	}

	//VxlNullConst:
	//	const="null";
	public VxlNullConstElements getVxlNullConstAccess() {
		return (pVxlNullConst != null) ? pVxlNullConst : (pVxlNullConst = new VxlNullConstElements());
	}
	
	public ParserRule getVxlNullConstRule() {
		return getVxlNullConstAccess().getRule();
	}

	//VxlNumericConst:
	//	const=NUMERIC;
	public VxlNumericConstElements getVxlNumericConstAccess() {
		return (pVxlNumericConst != null) ? pVxlNumericConst : (pVxlNumericConst = new VxlNumericConstElements());
	}
	
	public ParserRule getVxlNumericConstRule() {
		return getVxlNumericConstAccess().getRule();
	}

	//VxlStringConst:
	//	const=STRING;
	public VxlStringConstElements getVxlStringConstAccess() {
		return (pVxlStringConst != null) ? pVxlStringConst : (pVxlStringConst = new VxlStringConstElements());
	}
	
	public ParserRule getVxlStringConstRule() {
		return getVxlStringConstAccess().getRule();
	}

	//// BINARY OPERATIONS
	//// String ** String -> String
	//enum VxlOperator:
	//	LT="<" // Term ** Term -> Bool
	//	// Num ** Num -> Num
	//	// Bool ** Bool -> Bool
	//	| LE="<=" | EQ="==" | NEQ="!=" | GT=">" | GE=">=" | ADD="+" | SUB="-" | MULT="*" | DIV="/" | MOD="%" | AND="and" |
	//	OR="or" | CONCAT="++";
	public VxlOperatorElements getVxlOperatorAccess() {
		return (unknownRuleVxlOperator != null) ? unknownRuleVxlOperator : (unknownRuleVxlOperator = new VxlOperatorElements());
	}
	
	public EnumRule getVxlOperatorRule() {
		return getVxlOperatorAccess().getRule();
	}

	//// NATIVES
	//// ALTERNATIVES
	////terminal Numeric: "('0'..'9')+('.' ('0'..'9')+)?";
	////NumericConst:		const = INT; // keine kommazahlen 
	////BooleanConst:	isTrue ?= "true" | "false"; NUMERIC:
	//	INT ("." INT)?;
	public NUMERICElements getNUMERICAccess() {
		return (pNUMERIC != null) ? pNUMERIC : (pNUMERIC = new NUMERICElements());
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
