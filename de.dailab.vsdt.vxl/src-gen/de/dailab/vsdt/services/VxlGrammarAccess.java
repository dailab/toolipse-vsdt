/*
* generated by Xtext
*/

package de.dailab.vsdt.services;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class VxlGrammarAccess implements IGrammarAccess {
	
	
	public class TermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//Term:
		//  head=Head tail=Tail?; 
		//
		//// COMPLEX TERMS
		public ParserRule getRule() { return rule; }

		//head=Head tail=Tail?
		public Group getGroup() { return cGroup; }

		//head=Head
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Head
		public RuleCall getHeadHeadParserRuleCall_0_0() { return cHeadHeadParserRuleCall_0_0; }

		//tail=Tail?
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }

		//Tail
		public RuleCall getTailTailParserRuleCall_1_0() { return cTailTailParserRuleCall_1_0; }
	}

	public class HeadElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracketTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Head:
		//  BracketTerm|Negation|Atom;
		public ParserRule getRule() { return rule; }

		//BracketTerm|Negation|Atom
		public Alternatives getAlternatives() { return cAlternatives; }

		//BracketTerm
		public RuleCall getBracketTermParserRuleCall_0() { return cBracketTermParserRuleCall_0; }

		//Negation
		public RuleCall getNegationParserRuleCall_1() { return cNegationParserRuleCall_1; }

		//Atom
		public RuleCall getAtomParserRuleCall_2() { return cAtomParserRuleCall_2; }
	}

	public class TailElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//Tail:
		//  operator=Operator term=Term;
		public ParserRule getRule() { return rule; }

		//operator=Operator term=Term
		public Group getGroup() { return cGroup; }

		//operator=Operator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_0() { return cOperatorOperatorEnumRuleCall_0_0; }

		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}

	public class BracketTermElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketTerm:
		//  "(" term=Term ")";
		public ParserRule getRule() { return rule; }

		//"(" term=Term ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class NegationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//Negation:
		//  "!" term=Term;
		public ParserRule getRule() { return rule; }

		//"!" term=Term
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Atom:
		//  Value|Variable; 
		//			     
		//
		//// VARIABLES & ACCESSORS
		public ParserRule getRule() { return rule; }

		//Value|Variable 
		//			     
		//
		//// VARIABLES & ACCESSORS
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class VariableElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAccessorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessorAccessorParserRuleCall_2_0 = (RuleCall)cAccessorAssignment_2.eContents().get(0);
		
		//Variable:
		//  "$" name=ID accessor=Accessor?; 
		//
		//// VARIABLES & ACCESSORS
		public ParserRule getRule() { return rule; }

		//"$" name=ID accessor=Accessor?
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//accessor=Accessor?
		public Assignment getAccessorAssignment_2() { return cAccessorAssignment_2; }

		//Accessor
		public RuleCall getAccessorAccessorParserRuleCall_2_0() { return cAccessorAccessorParserRuleCall_2_0; }
	}

	public class AccessorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Accessor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayAccessorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldAccessorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Accessor:
		//  ArrayAccessor|FieldAccessor;
		public ParserRule getRule() { return rule; }

		//ArrayAccessor|FieldAccessor
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayAccessor
		public RuleCall getArrayAccessorParserRuleCall_0() { return cArrayAccessorParserRuleCall_0; }

		//FieldAccessor
		public RuleCall getFieldAccessorParserRuleCall_1() { return cFieldAccessorParserRuleCall_1; }
	}

	public class ArrayAccessorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayAccessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexTermParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccessorAccessorParserRuleCall_3_0 = (RuleCall)cAccessorAssignment_3.eContents().get(0);
		
		//ArrayAccessor:
		//  "[" index=Term "]" accessor=Accessor?;
		public ParserRule getRule() { return rule; }

		//"[" index=Term "]" accessor=Accessor?
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//index=Term
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }

		//Term
		public RuleCall getIndexTermParserRuleCall_1_0() { return cIndexTermParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//accessor=Accessor?
		public Assignment getAccessorAssignment_3() { return cAccessorAssignment_3; }

		//Accessor
		public RuleCall getAccessorAccessorParserRuleCall_3_0() { return cAccessorAccessorParserRuleCall_3_0; }
	}

	public class FieldAccessorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAccessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAccessorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessorAccessorParserRuleCall_2_0 = (RuleCall)cAccessorAssignment_2.eContents().get(0);
		
		//FieldAccessor:
		//  "." name=ID accessor=Accessor?; 
		//	             
		//
		//// CONSTANTS
		public ParserRule getRule() { return rule; }

		//"." name=ID accessor=Accessor?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//accessor=Accessor?
		public Assignment getAccessorAssignment_2() { return cAccessorAssignment_2; }

		//Accessor
		public RuleCall getAccessorAccessorParserRuleCall_2_0() { return cAccessorAccessorParserRuleCall_2_0; }
	}

	public class ValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericConstParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullConstParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//  StringConst|BooleanConst|NumericConst|NullConst; 
		//
		//// CONSTANTS
		public ParserRule getRule() { return rule; }

		//StringConst|BooleanConst|NumericConst|NullConst 
		//
		//// CONSTANTS
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringConst
		public RuleCall getStringConstParserRuleCall_0() { return cStringConstParserRuleCall_0; }

		//BooleanConst
		public RuleCall getBooleanConstParserRuleCall_1() { return cBooleanConstParserRuleCall_1; }

		//NumericConst
		public RuleCall getNumericConstParserRuleCall_2() { return cNumericConstParserRuleCall_2; }

		//NullConst
		public RuleCall getNullConstParserRuleCall_3() { return cNullConstParserRuleCall_3; }
	}

	public class StringConstElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstSTRINGTerminalRuleCall_0 = (RuleCall)cConstAssignment.eContents().get(0);
		
		//StringConst:
		//  const=STRING; 
		//	     
		////NumericConst:	const = INT; // keine kommazahlen
		public ParserRule getRule() { return rule; }

		//const=STRING
		public Assignment getConstAssignment() { return cConstAssignment; }

		//STRING
		public RuleCall getConstSTRINGTerminalRuleCall_0() { return cConstSTRINGTerminalRuleCall_0; }
	}

	public class NumericConstElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstNUMERICParserRuleCall_0 = (RuleCall)cConstAssignment.eContents().get(0);
		
		//NumericConst:
		//  const=NUMERIC; 
		////NumericConst:	const = INT; // keine kommazahlen
		public ParserRule getRule() { return rule; }

		//const=NUMERIC
		public Assignment getConstAssignment() { return cConstAssignment; }

		//NUMERIC
		public RuleCall getConstNUMERICParserRuleCall_0() { return cConstNUMERICParserRuleCall_0; }
	}

	public class BooleanConstElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIsTrueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIsTrueTrueKeyword_0_0 = (Keyword)cIsTrueAssignment_0.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanConst:
		//  isTrue?="true"|"false";
		public ParserRule getRule() { return rule; }

		//isTrue?="true"|"false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_0() { return cIsTrueAssignment_0; }

		//"true"
		public Keyword getIsTrueTrueKeyword_0_0() { return cIsTrueTrueKeyword_0_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NullConstElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullConst");
		private final Assignment cConstAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConstNullKeyword_0 = (Keyword)cConstAssignment.eContents().get(0);
		
		//NullConst:
		//  const="null"; 
		//		     
		//
		//// OPERATIONS
		public ParserRule getRule() { return rule; }

		//const="null"
		public Assignment getConstAssignment() { return cConstAssignment; }

		//"null"
		public Keyword getConstNullKeyword_0() { return cConstNullKeyword_0; }
	}

	public class NUMERICElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMERIC returns ecore::EString:
		//  "-"? INT ("." INT)?;  															 // String ** String -> String
		//
		//// NATIVES
		////terminal Numeric: "('-')?('0'..'9')+('.' ('0'..'9')+)?";
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	public class OperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLELessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNEQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTGreaterThanSignKeyword_4_0 = (Keyword)cGTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cADDPlusSignKeyword_6_0 = (Keyword)cADDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSUBHyphenMinusKeyword_7_0 = (Keyword)cSUBEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMULTAsteriskKeyword_8_0 = (Keyword)cMULTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDIVSolidusKeyword_9_0 = (Keyword)cDIVEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cMODPercentSignKeyword_10_0 = (Keyword)cMODEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cANDAmpersandAmpersandKeyword_11_0 = (Keyword)cANDEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cORVerticalLineVerticalLineKeyword_12_0 = (Keyword)cOREnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cCONCATEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cCONCATPlusSignPlusSignKeyword_13_0 = (Keyword)cCONCATEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum Operator:
		//  LT="<" | LE="<=" | EQ="==" | NEQ="!=" | GT=">" | GE=">=" | ADD="+" | SUB="-" | MULT="*" | DIV="/" |
		//  MOD="%" | AND="&&" | OR="||" | CONCAT="++"; 
		//
		//// OPERATIONS
		//   
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		//	      															 // String ** String -> String
		//
		//// NATIVES
		////terminal Numeric: "('-')?('0'..'9')+('.' ('0'..'9')+)?";
		public EnumRule getRule() { return rule; }

		//LT="<" | LE="<=" | EQ="==" | NEQ="!=" | GT=">" | GE=">=" | ADD="+" | SUB="-" | MULT="*" | DIV="/" |
		//MOD="%" | AND="&&" | OR="||" | CONCAT="++" 
		//
		//// OPERATIONS
		//   
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		//	      															 // String ** String -> String
		//
		//// NATIVES
		////terminal Numeric: "('-')?('0'..'9')+('.' ('0'..'9')+)?";
		public Alternatives getAlternatives() { return cAlternatives; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }

		//LE="<="  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_1() { return cLEEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_1_0() { return cLELessThanSignEqualsSignKeyword_1_0; }

		//EQ="=="  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }

		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_2_0() { return cEQEqualsSignEqualsSignKeyword_2_0; }

		//NEQ="!="  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_3() { return cNEQEnumLiteralDeclaration_3; }

		//"!="
		public Keyword getNEQExclamationMarkEqualsSignKeyword_3_0() { return cNEQExclamationMarkEqualsSignKeyword_3_0; }

		//GT=">"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_4() { return cGTEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_4_0() { return cGTGreaterThanSignKeyword_4_0; }

		//GE=">="  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_5() { return cGEEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_5_0() { return cGEGreaterThanSignEqualsSignKeyword_5_0; }

		//ADD="+"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_6() { return cADDEnumLiteralDeclaration_6; }

		//"+" 	 // Term ** Term -> Bool
		public Keyword getADDPlusSignKeyword_6_0() { return cADDPlusSignKeyword_6_0; }

		//SUB="-"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_7() { return cSUBEnumLiteralDeclaration_7; }

		//"-"
		public Keyword getSUBHyphenMinusKeyword_7_0() { return cSUBHyphenMinusKeyword_7_0; }

		//MULT="*"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_8() { return cMULTEnumLiteralDeclaration_8; }

		//"*"
		public Keyword getMULTAsteriskKeyword_8_0() { return cMULTAsteriskKeyword_8_0; }

		//DIV="/"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_9() { return cDIVEnumLiteralDeclaration_9; }

		//"/"
		public Keyword getDIVSolidusKeyword_9_0() { return cDIVSolidusKeyword_9_0; }

		//MOD="%"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_10() { return cMODEnumLiteralDeclaration_10; }

		//"%"
		public Keyword getMODPercentSignKeyword_10_0() { return cMODPercentSignKeyword_10_0; }

		//AND="&&"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_11() { return cANDEnumLiteralDeclaration_11; }

		//"&&" 			 // Num ** Num -> Num
		public Keyword getANDAmpersandAmpersandKeyword_11_0() { return cANDAmpersandAmpersandKeyword_11_0; }

		//OR="||"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_12() { return cOREnumLiteralDeclaration_12; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_12_0() { return cORVerticalLineVerticalLineKeyword_12_0; }

		//CONCAT="++"  
		//	                                              	 // Term ** Term -> Bool
		//	                                       			 // Num ** Num -> Num
		//	               												 // Bool ** Bool -> Bool
		public EnumLiteralDeclaration getCONCATEnumLiteralDeclaration_13() { return cCONCATEnumLiteralDeclaration_13; }

		//"++" 												 // Bool ** Bool -> Bool
		public Keyword getCONCATPlusSignPlusSignKeyword_13_0() { return cCONCATPlusSignPlusSignKeyword_13_0; }
	}
	
	private TermElements pTerm;
	private HeadElements pHead;
	private TailElements pTail;
	private BracketTermElements pBracketTerm;
	private NegationElements pNegation;
	private AtomElements pAtom;
	private VariableElements pVariable;
	private AccessorElements pAccessor;
	private ArrayAccessorElements pArrayAccessor;
	private FieldAccessorElements pFieldAccessor;
	private ValueElements pValue;
	private StringConstElements pStringConst;
	private NumericConstElements pNumericConst;
	private BooleanConstElements pBooleanConst;
	private NullConstElements pNullConst;
	private OperatorElements unknownRuleOperator;
	private NUMERICElements pNUMERIC;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VxlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Term:
	//  head=Head tail=Tail?; 
	//
	//// COMPLEX TERMS
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Head:
	//  BracketTerm|Negation|Atom;
	public HeadElements getHeadAccess() {
		return (pHead != null) ? pHead : (pHead = new HeadElements());
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	//Tail:
	//  operator=Operator term=Term;
	public TailElements getTailAccess() {
		return (pTail != null) ? pTail : (pTail = new TailElements());
	}
	
	public ParserRule getTailRule() {
		return getTailAccess().getRule();
	}

	//BracketTerm:
	//  "(" term=Term ")";
	public BracketTermElements getBracketTermAccess() {
		return (pBracketTerm != null) ? pBracketTerm : (pBracketTerm = new BracketTermElements());
	}
	
	public ParserRule getBracketTermRule() {
		return getBracketTermAccess().getRule();
	}

	//Negation:
	//  "!" term=Term;
	public NegationElements getNegationAccess() {
		return (pNegation != null) ? pNegation : (pNegation = new NegationElements());
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Atom:
	//  Value|Variable; 
	//			     
	//
	//// VARIABLES & ACCESSORS
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//Variable:
	//  "$" name=ID accessor=Accessor?; 
	//
	//// VARIABLES & ACCESSORS
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Accessor:
	//  ArrayAccessor|FieldAccessor;
	public AccessorElements getAccessorAccess() {
		return (pAccessor != null) ? pAccessor : (pAccessor = new AccessorElements());
	}
	
	public ParserRule getAccessorRule() {
		return getAccessorAccess().getRule();
	}

	//ArrayAccessor:
	//  "[" index=Term "]" accessor=Accessor?;
	public ArrayAccessorElements getArrayAccessorAccess() {
		return (pArrayAccessor != null) ? pArrayAccessor : (pArrayAccessor = new ArrayAccessorElements());
	}
	
	public ParserRule getArrayAccessorRule() {
		return getArrayAccessorAccess().getRule();
	}

	//FieldAccessor:
	//  "." name=ID accessor=Accessor?; 
	//	             
	//
	//// CONSTANTS
	public FieldAccessorElements getFieldAccessorAccess() {
		return (pFieldAccessor != null) ? pFieldAccessor : (pFieldAccessor = new FieldAccessorElements());
	}
	
	public ParserRule getFieldAccessorRule() {
		return getFieldAccessorAccess().getRule();
	}

	//Value:
	//  StringConst|BooleanConst|NumericConst|NullConst; 
	//
	//// CONSTANTS
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//StringConst:
	//  const=STRING; 
	//	     
	////NumericConst:	const = INT; // keine kommazahlen
	public StringConstElements getStringConstAccess() {
		return (pStringConst != null) ? pStringConst : (pStringConst = new StringConstElements());
	}
	
	public ParserRule getStringConstRule() {
		return getStringConstAccess().getRule();
	}

	//NumericConst:
	//  const=NUMERIC; 
	////NumericConst:	const = INT; // keine kommazahlen
	public NumericConstElements getNumericConstAccess() {
		return (pNumericConst != null) ? pNumericConst : (pNumericConst = new NumericConstElements());
	}
	
	public ParserRule getNumericConstRule() {
		return getNumericConstAccess().getRule();
	}

	//BooleanConst:
	//  isTrue?="true"|"false";
	public BooleanConstElements getBooleanConstAccess() {
		return (pBooleanConst != null) ? pBooleanConst : (pBooleanConst = new BooleanConstElements());
	}
	
	public ParserRule getBooleanConstRule() {
		return getBooleanConstAccess().getRule();
	}

	//NullConst:
	//  const="null"; 
	//		     
	//
	//// OPERATIONS
	public NullConstElements getNullConstAccess() {
		return (pNullConst != null) ? pNullConst : (pNullConst = new NullConstElements());
	}
	
	public ParserRule getNullConstRule() {
		return getNullConstAccess().getRule();
	}

	//enum Operator:
	//  LT="<" | LE="<=" | EQ="==" | NEQ="!=" | GT=">" | GE=">=" | ADD="+" | SUB="-" | MULT="*" | DIV="/" |
	//  MOD="%" | AND="&&" | OR="||" | CONCAT="++"; 
	//
	//// OPERATIONS
	//   
	//	                                              	 // Term ** Term -> Bool
	//	                                       			 // Num ** Num -> Num
	//	               												 // Bool ** Bool -> Bool
	//	      															 // String ** String -> String
	//
	//// NATIVES
	////terminal Numeric: "('-')?('0'..'9')+('.' ('0'..'9')+)?";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//NUMERIC returns ecore::EString:
	//  "-"? INT ("." INT)?;  															 // String ** String -> String
	//
	//// NATIVES
	////terminal Numeric: "('-')?('0'..'9')+('.' ('0'..'9')+)?";
	public NUMERICElements getNUMERICAccess() {
		return (pNUMERIC != null) ? pNUMERIC : (pNUMERIC = new NUMERICElements());
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
