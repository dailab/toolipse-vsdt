/*
* generated by Xtext
*/
grammar InternalVxl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	 memoize=true;
	
}

@lexer::header {
package de.dailab.vsdt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.dailab.vsdt.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.dailab.vsdt.services.VxlGrammarAccess;

}

@parser::members {
 
 	private VxlGrammarAccess grammarAccess;
 	
    public InternalVxlParser(TokenStream input, IAstFactory factory, VxlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/dailab/vsdt/parser/antlr/internal/InternalVxl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Term";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getHeadHeadParserRuleCall_0_0(), currentNode); 
	    }
	    lv_head_0=ruleHead 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "head", lv_head_0, "Head", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTermAccess().getTailTailParserRuleCall_1_0(), currentNode); 
	    }
	    lv_tail_1=ruleTail 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "tail", lv_tail_1, "Tail", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleHead
entryRuleHead returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHeadRule(), currentNode); }
	 iv_ruleHead=ruleHead 
	 { $current=$iv_ruleHead.current; } 
	 EOF 
;

// Rule Head
ruleHead returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getHeadAccess().getBracketTermParserRuleCall_0(), currentNode); 
    }
    this_BracketTerm_0=ruleBracketTerm
    { 
        $current = $this_BracketTerm_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getHeadAccess().getNegationParserRuleCall_1(), currentNode); 
    }
    this_Negation_1=ruleNegation
    { 
        $current = $this_Negation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getHeadAccess().getAtomParserRuleCall_2(), currentNode); 
    }
    this_Atom_2=ruleAtom
    { 
        $current = $this_Atom_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleTail
entryRuleTail returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTailRule(), currentNode); }
	 iv_ruleTail=ruleTail 
	 { $current=$iv_ruleTail.current; } 
	 EOF 
;

// Rule Tail
ruleTail returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTailAccess().getOperatorOperatorEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_operator_0=ruleOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTailRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_0, "Operator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTailAccess().getTermTermParserRuleCall_1_0(), currentNode); 
	    }
	    lv_term_1=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTailRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "term", lv_term_1, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleBracketTerm
entryRuleBracketTerm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBracketTermRule(), currentNode); }
	 iv_ruleBracketTerm=ruleBracketTerm 
	 { $current=$iv_ruleBracketTerm.current; } 
	 EOF 
;

// Rule BracketTerm
ruleBracketTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getBracketTermAccess().getLeftParenthesisKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBracketTermAccess().getTermTermParserRuleCall_1_0(), currentNode); 
	    }
	    lv_term_1=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBracketTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "term", lv_term_1, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getBracketTermAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNegationRule(), currentNode); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('!' 
    {
        createLeafNode(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNegationAccess().getTermTermParserRuleCall_1_0(), currentNode); 
	    }
	    lv_term_1=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNegationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "term", lv_term_1, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getValueParserRuleCall_0(), currentNode); 
    }
    this_Value_0=ruleValue
    { 
        $current = $this_Value_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getVariableParserRuleCall_1(), currentNode); 
    }
    this_Variable_1=ruleVariable
    { 
        $current = $this_Variable_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('$' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getDollarSignKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getAccessorAccessorParserRuleCall_2_0(), currentNode); 
	    }
	    lv_accessor_2=ruleAccessor 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "accessor", lv_accessor_2, "Accessor", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleAccessor
entryRuleAccessor returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAccessorRule(), currentNode); }
	 iv_ruleAccessor=ruleAccessor 
	 { $current=$iv_ruleAccessor.current; } 
	 EOF 
;

// Rule Accessor
ruleAccessor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAccessorAccess().getArrayAccessorParserRuleCall_0(), currentNode); 
    }
    this_ArrayAccessor_0=ruleArrayAccessor
    { 
        $current = $this_ArrayAccessor_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAccessorAccess().getFieldAccessorParserRuleCall_1(), currentNode); 
    }
    this_FieldAccessor_1=ruleFieldAccessor
    { 
        $current = $this_FieldAccessor_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleArrayAccessor
entryRuleArrayAccessor returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArrayAccessorRule(), currentNode); }
	 iv_ruleArrayAccessor=ruleArrayAccessor 
	 { $current=$iv_ruleArrayAccessor.current; } 
	 EOF 
;

// Rule ArrayAccessor
ruleArrayAccessor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('[' 
    {
        createLeafNode(grammarAccess.getArrayAccessorAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArrayAccessorAccess().getIndexTermParserRuleCall_1_0(), currentNode); 
	    }
	    lv_index_1=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrayAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "index", lv_index_1, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)']' 
    {
        createLeafNode(grammarAccess.getArrayAccessorAccess().getRightSquareBracketKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArrayAccessorAccess().getAccessorAccessorParserRuleCall_3_0(), currentNode); 
	    }
	    lv_accessor_3=ruleAccessor 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrayAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "accessor", lv_accessor_3, "Accessor", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleFieldAccessor
entryRuleFieldAccessor returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFieldAccessorRule(), currentNode); }
	 iv_ruleFieldAccessor=ruleFieldAccessor 
	 { $current=$iv_ruleFieldAccessor.current; } 
	 EOF 
;

// Rule FieldAccessor
ruleFieldAccessor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('.' 
    {
        createLeafNode(grammarAccess.getFieldAccessorAccess().getFullStopKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getFieldAccessorAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccessorAccess().getAccessorAccessorParserRuleCall_2_0(), currentNode); 
	    }
	    lv_accessor_2=ruleAccessor 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldAccessorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "accessor", lv_accessor_2, "Accessor", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getValueRule(), currentNode); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getStringConstParserRuleCall_0(), currentNode); 
    }
    this_StringConst_0=ruleStringConst
    { 
        $current = $this_StringConst_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getBooleanConstParserRuleCall_1(), currentNode); 
    }
    this_BooleanConst_1=ruleBooleanConst
    { 
        $current = $this_BooleanConst_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getNumericConstParserRuleCall_2(), currentNode); 
    }
    this_NumericConst_2=ruleNumericConst
    { 
        $current = $this_NumericConst_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueAccess().getNullConstParserRuleCall_3(), currentNode); 
    }
    this_NullConst_3=ruleNullConst
    { 
        $current = $this_NullConst_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleStringConst
entryRuleStringConst returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringConstRule(), currentNode); }
	 iv_ruleStringConst=ruleStringConst 
	 { $current=$iv_ruleStringConst.current; } 
	 EOF 
;

// Rule StringConst
ruleStringConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_const_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringConstAccess().getConstSTRINGTerminalRuleCall_0(), "const"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "const", lv_const_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleNumericConst
entryRuleNumericConst returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNumericConstRule(), currentNode); }
	 iv_ruleNumericConst=ruleNumericConst 
	 { $current=$iv_ruleNumericConst.current; } 
	 EOF 
;

// Rule NumericConst
ruleNumericConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNumericConstAccess().getConstNUMERICParserRuleCall_0(), currentNode); 
	    }
	    lv_const_0=ruleNUMERIC 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "const", lv_const_0, "NUMERIC", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleBooleanConst
entryRuleBooleanConst returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanConstRule(), currentNode); }
	 iv_ruleBooleanConst=ruleBooleanConst 
	 { $current=$iv_ruleBooleanConst.current; } 
	 EOF 
;

// Rule BooleanConst
ruleBooleanConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_isTrue_0='true' 
    {
        createLeafNode(grammarAccess.getBooleanConstAccess().getIsTrueTrueKeyword_0_0(), "isTrue"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isTrue", true, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |'false' 
    {
        createLeafNode(grammarAccess.getBooleanConstAccess().getFalseKeyword_1(), null); 
    }
);





// Entry rule entryRuleNullConst
entryRuleNullConst returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNullConstRule(), currentNode); }
	 iv_ruleNullConst=ruleNullConst 
	 { $current=$iv_ruleNullConst.current; } 
	 EOF 
;

// Rule NullConst
ruleNullConst returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_const_0='null' 
    {
        createLeafNode(grammarAccess.getNullConstAccess().getConstNullKeyword_0(), "const"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullConstRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "const", /* lv_const_0 */ input.LT(-1), "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleNUMERIC
entryRuleNUMERIC returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNUMERICRule(), currentNode); } 
	 iv_ruleNUMERIC=ruleNUMERIC 
	 { $current=$iv_ruleNUMERIC.current.getText(); }  
	 EOF 
;

// Rule NUMERIC
ruleNUMERIC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMERICAccess().getHyphenMinusKeyword_0(), null); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getNUMERICAccess().getINTTerminalRuleCall_1(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMERICAccess().getFullStopKeyword_2_0(), null); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    createLeafNode(grammarAccess.getNUMERICAccess().getINTTerminalRuleCall_2_1(), null); 
    }
)?)
    ;





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'<' 
	{
        $current = grammarAccess.getOperatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getOperatorAccess().getLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getOperatorAccess().getNEQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNEQEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getOperatorAccess().getGTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGTEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getOperatorAccess().getGEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGEEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getOperatorAccess().getMULTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getMULTEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'/' 
	{
        $current = grammarAccess.getOperatorAccess().getDIVEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getDIVEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'%' 
	{
        $current = grammarAccess.getOperatorAccess().getMODEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getMODEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'&&' 
	{
        $current = grammarAccess.getOperatorAccess().getANDEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getANDEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'||' 
	{
        $current = grammarAccess.getOperatorAccess().getOREnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getOREnumLiteralDeclaration_12(), null); 
    }
)
    |(	'++' 
	{
        $current = grammarAccess.getOperatorAccess().getCONCATEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getCONCATEnumLiteralDeclaration_13(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


